#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.9 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 59 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 408 0 30 3 12 #"#lang racket"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 7 #"require"
0 0 26 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"         "
0 0 19 3 15 #"\"const+aux.rkt\""
0 0 26 29 1 #"\n"
0 0 26 3 9 #"         "
0 0 14 3 9 #"lang/posn"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"         "
0 0 14 3 22 #"test-engine/racket-gui"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 7 #"provide"
0 0 26 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 17 3 93
(4
 #";; conds returning bools don't need to have result-expr, but they can"
 #"'t be in tail position!!"
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 17 3 8 #";; tock:"
0 0 26 29 1 #"\n"
0 0 17 3 21 #";; 1. is-blocked? \342\234\223"
0 0 26 29 1 #"\n"
0 0 17 3 14 #";; 2. fall \342\234\223"
0 0 26 29 1 #"\n"
0 0 17 3 15 #";; 3. block \342\234\223"
0 0 26 29 1 #"\n"
0 0 17 3 22 #";; 4. aux-blocked? \342\234\223"
0 0 26 29 1 #"\n"
0 0 17 3 21 #";; 5. posn-equal? \342\234\223"
0 0 26 29 1 #"\n"
0 0 17 3 17 #";; 6. clear-row? "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 17 3 13 #";; Tet -> Tet"
0 0 26 29 1 #"\n"
0 0 17 3 46 #";; Depending on the posn of the tet-hand block"
0 0 26 29 1 #"\n"
0 0 17 3 92
(5
 #";; 1. tet-hand can fall down and there isn't anything obstructing him"
 #" -> change posn-y by -1"
) 0 0 26 29 1 #"\n"
0 0 17 3 125
(6
 #";; 2. tet-hand has a block below it and it is obstructed -> append te"
 #"t-hand to tet-blocks and spawn a new block on posn(5 22)"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"tock"
0 0 26 3 1 #" "
0 0 14 3 3 #"tet"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 11 #"is-blocked?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"tet-hand"
0 0 26 3 1 #" "
0 0 14 3 3 #"tet"
0 0 26 3 3 #") ("
0 0 14 3 10 #"tet-blocks"
0 0 26 3 1 #" "
0 0 14 3 3 #"tet"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 8 #"make-tet"
0 0 26 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 26 3 1 #" "
0 0 22 3 1 #"5"
0 0 26 3 1 #" "
0 0 22 3 2 #"22"
0 0 26 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 36 #"                                  [("
0 0 14 3 10 #"clear-row?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"tet-hand"
0 0 26 3 1 #" "
0 0 14 3 3 #"tet"
0 0 26 3 3 #") ("
0 0 14 3 10 #"tet-blocks"
0 0 26 3 1 #" "
0 0 14 3 3 #"tet"
0 0 26 3 4 #")) ("
0 0 14 3 10 #"clear-row!"
0 0 26 3 2 #" ("
0 0 14 3 8 #"tet-hand"
0 0 26 3 1 #" "
0 0 14 3 3 #"tet"
0 0 26 3 3 #") ("
0 0 14 3 10 #"tet-blocks"
0 0 26 3 1 #" "
0 0 14 3 3 #"tet"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 35 #"                                  ["
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 5 #"block"
0 0 26 3 2 #" ("
0 0 14 3 8 #"tet-hand"
0 0 26 3 1 #" "
0 0 14 3 3 #"tet"
0 0 26 3 3 #") ("
0 0 14 3 10 #"tet-blocks"
0 0 26 3 1 #" "
0 0 14 3 3 #"tet"
0 0 26 3 6 #"))]))]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 8 #"make-tet"
0 0 26 3 2 #" ("
0 0 14 3 4 #"fall"
0 0 26 3 2 #" ("
0 0 14 3 8 #"tet-hand"
0 0 26 3 1 #" "
0 0 14 3 3 #"tet"
0 0 26 3 4 #")) ("
0 0 14 3 10 #"tet-blocks"
0 0 26 3 1 #" "
0 0 14 3 3 #"tet"
0 0 26 3 5 #"))]))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 17 3 50 #";; Posn(tet-hand) ListOf(Posn)(tet-blocks) -> Bool"
0 0 26 29 1 #"\n"
0 0 17 3 47 #";; Returns true if either one of these is true:"
0 0 26 29 1 #"\n"
0 0 17 3 36 #";; 1. The block is at position (x 1)"
0 0 26 29 1 #"\n"
0 0 17 3 86
(7
 #";; 2. The block is directly above any of the blocks -> tet-hand(x y+1"
 #") tet-blocks(x y)"
) 0 0 26 29 1 #"\n"
0 0 17 3 26 #";; Otherwise returns false"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"is-blocked?"
0 0 26 3 1 #" "
0 0 14 3 4 #"hand"
0 0 26 3 1 #" "
0 0 14 3 6 #"blocks"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 1 #"="
0 0 26 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 26 3 1 #" "
0 0 14 3 4 #"hand"
0 0 26 3 2 #") "
0 0 22 3 1 #"1"
0 0 26 3 2 #") "
0 0 22 3 2 #"#t"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 12 #"aux-blocked?"
0 0 26 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 26 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 26 3 1 #" "
0 0 14 3 4 #"hand"
0 0 26 3 3 #") ("
0 0 14 3 1 #"-"
0 0 26 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 26 3 1 #" "
0 0 14 3 4 #"hand"
0 0 26 3 2 #") "
0 0 22 3 1 #"1"
0 0 26 3 3 #")) "
0 0 14 3 6 #"blocks"
0 0 26 3 2 #") "
0 0 22 3 2 #"#t"
0 0 26 3 2 #"] "
0 0 17 3 16 #";; the hard part"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 22 3 2 #"#f"
0 0 26 3 3 #"]))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 17 3 50 #";; Posn(tet-hand) ListOf(Posn)(tet-blocks) -> Bool"
0 0 26 29 1 #"\n"
0 0 17 3 78
(8
 #";; checks if hand(x,y-1) is equal to the list of blocks, returns true"
 #" if it is"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"aux-blocked?"
0 0 26 3 1 #" "
0 0 14 3 6 #"hand-1"
0 0 26 3 1 #" "
0 0 14 3 6 #"blocks"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 26 3 1 #" "
0 0 14 3 6 #"blocks"
0 0 26 3 2 #") "
0 0 22 3 2 #"#f"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 11 #"posn-equal?"
0 0 26 3 1 #" "
0 0 14 3 6 #"hand-1"
0 0 26 3 2 #" ("
0 0 14 3 5 #"first"
0 0 26 3 1 #" "
0 0 14 3 6 #"blocks"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 12 #"aux-blocked?"
0 0 26 3 1 #" "
0 0 14 3 6 #"hand-1"
0 0 26 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 26 3 1 #" "
0 0 14 3 6 #"blocks"
0 0 26 3 4 #")))]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 22 3 2 #"#f"
0 0 26 3 3 #"]))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 17 3 20 #";; Posn Posn -> Bool"
0 0 26 29 1 #"\n"
0 0 17 3 80
(9
 #";; compares the posn values to return #t if they are equal or #f if t"
 #"hey are not"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"posn-equal?"
0 0 26 3 1 #" "
0 0 14 3 4 #"hand"
0 0 26 3 1 #" "
0 0 14 3 6 #"blocks"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 26 3 1 #" "
0 0 14 3 4 #"hand"
0 0 26 3 3 #") ("
0 0 14 3 6 #"posn-x"
0 0 26 3 1 #" "
0 0 14 3 6 #"blocks"
0 0 26 3 4 #")) ("
0 0 14 3 1 #"="
0 0 26 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 26 3 1 #" "
0 0 14 3 4 #"hand"
0 0 26 3 3 #") ("
0 0 14 3 6 #"posn-y"
0 0 26 3 1 #" "
0 0 14 3 6 #"blocks"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 17 3 35 #";; Posn(tet-hand) -> Posn(tet-hand)"
0 0 26 29 1 #"\n"
0 0 17 3 46 #";; changes the value for tet-hand posn(x, y-1)"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"fall"
0 0 26 3 1 #" "
0 0 14 3 4 #"hand"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 9 #"make-posn"
0 0 26 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 26 3 1 #" "
0 0 14 3 4 #"hand"
0 0 26 3 3 #") ("
0 0 14 3 1 #"-"
0 0 26 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 26 3 1 #" "
0 0 14 3 4 #"hand"
0 0 26 3 2 #") "
0 0 22 3 1 #"1"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 17 3 70
(10
 #";; Posn(tet-hand) ListOf(Posn)(tet-blocks) -> ListOf(Posn)(tet-blocks"
 #")"
) 0 0 26 29 1 #"\n"
0 0 17 3 78
(11
 #";; appends the value of tet-hand to list tet-blocks and returns new t"
 #"et-blocks"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 5 #"block"
0 0 26 3 1 #" "
0 0 14 3 4 #"hand"
0 0 26 3 1 #" "
0 0 14 3 6 #"blocks"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 6 #"append"
0 0 26 3 1 #" "
0 0 14 3 6 #"blocks"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 4 #"hand"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 17 3 42 #";; Posn(hand) ListOf(posn)(blocks) -> Bool"
0 0 26 29 1 #"\n"
0 0 17 3 35 #";; checks if a row of 10 is cleared"
0 0 26 29 1 #"\n"
0 0 17 3 45 #";; checks the row on the hand-x if it is full"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"clear-row?"
0 0 26 3 1 #" "
0 0 14 3 4 #"hand"
0 0 26 3 1 #" "
0 0 14 3 6 #"blocks"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 22 3 2 #"#f"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 17 3 58
#";; Posn(hand) ListOf(posn)(blocks) -> ListOf(posn)(blocks)"
0 0 26 29 1 #"\n"
0 0 17 3 57 #";; clears a row of 10 and lets the other blocks fall down"
0 0 26 29 1 #"\n"
0 0 17 3 49 #";; every block higher than hand(x y) goes (x y-1)"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"clear-row!"
0 0 26 3 1 #" "
0 0 14 3 4 #"hand"
0 0 26 3 1 #" "
0 0 14 3 6 #"blocks"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 22 3 2 #"#t"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0           0
